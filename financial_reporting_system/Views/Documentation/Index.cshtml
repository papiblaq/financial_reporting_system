
<style>
    .container {
        margin: 20px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .cellValueRow {
        margin-bottom: 15px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #ffffff;
    }

        .cellValueRow label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .cellValueRow input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .cellValueRow button {
            margin-top: 5px;
            margin-right: 5px; /* Add margin between buttons */
        }

    .buttonContainer {
        text-align: center;
        margin-top: 20px;
    }

        .buttonContainer button {
            margin: 5px;
            padding: 10px 20px;
        }

    .formContainer {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
        position: relative;
    }

    .formContent {
        flex-grow: 1;
        overflow-y: auto;
    }

    .form-group {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #ffffff;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

    .helpIcon {
        position: absolute;
        bottom: 10px;
        right: 10px;
        cursor: pointer;
        font-size: 20px;
        color: #007bff;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        text-align: center;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>


@model List<financial_reporting_system.Controllers.Documentation.UserDefinedCellValues>

@{
    ViewData["Title"] = "Export Financial Data to Excel";
}

<h2>@ViewData["Title"]</h2>

<div class="container">
    <div class="formContainer">
        <form asp-action="ExportFinancialDataToExcel" method="post" class="formContent">
            <div class="form-group">
                <label for="selectedDirectory">Select Directory:</label>
                <select name="selectedDirectory" class="form-control" required onchange="updateSelectedDirectory(this.value)">
                    <option value="">-- Select Directory --</option>
                    @foreach (var directory in ViewBag.Directories)
                    {
                        <option value="@directory" selected="@(directory == ViewBag.SelectedDirectory ? "selected" : null)">@directory</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="selectedTemplate">Select the Excel Sheet:</label>
                <select name="selectedTemplate" class="form-control" required onchange="updateSelectedTemplate(this.value)">
                    <option value="">-- Select Excel Sheet --</option>
                    @foreach (var template in ViewBag.Templates)
                    {
                        <option value="@template" selected="@(template == ViewBag.SelectedTemplate ? "selected" : null)">@template</option>
                    }
                </select>
            </div>
            <input type="hidden" id="selectedTemplateHidden" name="selectedTemplate" value="@ViewBag.SelectedTemplate" />
            <div id="cellValuesContainer">
                <!-- Initial input fields -->
                @if (ViewBag.SavedValues != null)
                {
                    var savedValues = ViewBag.SavedValues as List<financial_reporting_system.Controllers.Documentation.UserDefinedCellValues>;
                    var rowIndex = 0;
                    foreach (var item in savedValues)
                    {
                        <div class="cellValueRow">
                            <label for="RefCd">Reference Code:</label>
                            <select name="exellCellsMappingInfo[@rowIndex].RefCd" class="form-control" required>
                                <option value="">-- Select Reference Code --</option>
                                @foreach (var refCode in ViewBag.RefCodes)
                                {
                                    <option value="@refCode.RefCd" selected="@(refCode.RefCd == item.RefCd ? "selected" : null)">
                                        @refCode.RefCd (@refCode.Description)
                                    </option>
                                }
                            </select>
                            <label for="ValueForCells">Value for Cells:</label>
                            <input type="text" name="exellCellsMappingInfo[@rowIndex].ValueForCells" class="form-control" value="@item.ValueForCells" required />
                            <button type="button" class="btn btn-warning removeRow">Remove</button>
                            <button type="button" class="btn btn-primary editRow">Edit</button>
                            <button type="button" class="btn btn-danger deleteRow">Delete</button>
                        </div>
                        rowIndex++;
                    }
                }
                else
                {
                    <div class="cellValueRow">
                        <label for="RefCd">Reference Code:</label>
                        <select name="exellCellsMappingInfo[0].RefCd" class="form-control" required>
                            <option value="">-- Select Reference Code --</option>
                            @foreach (var refCode in ViewBag.RefCodes)
                            {
                                <option value="@refCode.RefCd">@refCode.RefCd (@refCode.Description)</option>
                            }
                        </select>
                        <label for="ValueForCells">Value for Cells:</label>
                        <input type="text" name="exellCellsMappingInfo[0].ValueForCells" class="form-control" required />
                        <button type="button" class="btn btn-danger removeRow">Remove</button>
                        <button type="button" class="btn btn-primary editRow">Edit</button>
                        <button type="button" class="btn btn-warning deleteRow">Delete</button>
                    </div>
                }
            </div>
            <div class="buttonContainer">
                <button type="button" id="addRow" class="btn btn-primary">Add new cell</button>
                <button type="submit" class="btn btn-success">Export to Excel</button>
                <button type="button" id="saveExportingData" class="btn btn-info">Save Exporting Data</button>
            </div>
        </form>
        <div class="helpIcon" onclick="showHelpPopup()">?</div>
    </div>
</div>

<!-- Modal -->
<div id="helpModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeHelpPopup()">&times;</span>
        <p>
            Hello! Are you stuck? 😊 I'm here to help!

            Here's a quick breakdown of what each part means:

            Select Template: This dropdown lets you choose the specific template you want to work with.
            Reference Code: Select the reference code from the dropdown that will be used to fetch the summed up values from the database.
            Cell Value: Input the absolute cell reference (e.g., C11) where you want the queried data to be reported.
            If you have any questions or need further guidance, just let me know!
        </p>
    </div>
</div>

@section Scripts {
    <script>
        function updateSelectedTemplate(value) {
            document.getElementById("selectedTemplateHidden").value = value;
            var selectedTemplate = $("select[name='selectedTemplate']").val();

            // Check if there are no saved values for the selected template
            $.ajax({
                url: '@Url.Action("CheckSavedValues", "Documentation")',
                type: 'GET',
                data: { selectedTemplate: selectedTemplate },
                success: function (response) {
                    if (response.noSavedValues) {
                        if (confirm("No saved cells found for the selected template. Would you like to add new cells?")) {
                            window.location.href = '@Url.Action("InsertValues", "Documentation")' + '?selectedTemplate=' + selectedTemplate;
                        }
                    } else {
                        window.location.href = '@Url.Action("Index", "Documentation")' + '?selectedTemplate=' + selectedTemplate;
                    }
                },
                error: function () {
                    alert("An error occurred while checking saved values.");
                }
            });
        }

        function updateSelectedDirectory(value) {
            // Update the URL with the selected directory
            window.location.href = '@Url.Action("Index", "Documentation")' + '?selectedDirectory=' + value;
        }

        function updateSelectedTemplate(value) {
            // Update the URL with the selected template
            var selectedDirectory = $("select[name='selectedDirectory']").val();
            window.location.href = '@Url.Action("Index", "Documentation")' + '?selectedDirectory=' + selectedDirectory + '&selectedTemplate=' + value;
        }

        function updateSelectedDirectory(value) {
            // Fetch templates for the selected directory via AJAX
            $.ajax({
                url: '@Url.Action("GetTemplatesByDirectory", "Documentation")',
                type: 'GET',
                data: { selectedDirectory: value },
                success: function (response) {
                    // Clear the existing options in the "Select Excel Sheet" dropdown
                    $("select[name='selectedTemplate']").empty();

                    // Add the default option
                    $("select[name='selectedTemplate']").append('<option value="">-- Select Excel Sheet --</option>');

                    // Populate the "Select Excel Sheet" dropdown with the fetched templates
                    response.forEach(function (template) {
                        $("select[name='selectedTemplate']").append('<option value="' + template + '">' + template + '</option>');
                    });
                },
                error: function () {
                    alert("An error occurred while fetching templates.");
                }
            });
        }

        $(document).ready(function () {
            var rowIndex = @if (ViewBag.SavedValues != null)
        {
            <text>@((ViewBag.SavedValues as List<financial_reporting_system.Controllers.Documentation.UserDefinedCellValues>).Count)</text>
        }
        else
        {
            <text>1</text>
        };

            // Add new row
            $("#addRow").click(function () {
                var newRow = `
                            <div class="cellValueRow">
                                <label for="RefCd">Reference Code:</label>
                                <select name="exellCellsMappingInfo[${rowIndex}].RefCd" class="form-control" required>
                                    <option value="">-- Select Reference Code --</option>
        @foreach (var refCode in ViewBag.RefCodes)
        {
                                                <option value="@refCode.RefCd">@refCode.RefCd (@refCode.Description)</option>
        }
                                </select>
                                <label for="ValueForCells">Value for Cells:</label>
                                <input type="text" name="exellCellsMappingInfo[${rowIndex}].ValueForCells" class="form-control" required />
                                <button type="button" class="btn btn-danger removeRow">Remove</button>
                                <button type="button" class="btn btn-primary editRow">Edit</button>
                                <button type="button" class="btn btn-warning deleteRow">Delete</button>
                            </div>
                        `;
                $("#cellValuesContainer").append(newRow);
                rowIndex++;
            });

            // Remove row
            $("#cellValuesContainer").on("click", ".removeRow", function () {
                $(this).closest(".cellValueRow").remove();
                adjustIndices();
            });

            // Edit row
            $("#cellValuesContainer").on("click", ".editRow", function () {
                var row = $(this).closest(".cellValueRow");
                var refCd = row.find("select").val();
                var valueForCells = row.find("input").val();
                var selectedTemplate = $("select[name='selectedTemplate']").val();

                // Display the first confirmation dialog
                if (confirm("Are you sure you want to edit this row?")) {
                    // Show the "Save Edits" button
                    var saveEditsButton = $('<button type="button" class="btn btn-success saveEdits">Save Edits</button>');
                    row.append(saveEditsButton);

                    // Event handler for the "Save Edits" button
                    saveEditsButton.click(function () {
                        // Display the second confirmation dialog
                        if (confirm("Are you sure you want to save the edits?")) {
                            // Perform the AJAX request to save the edits
                            $.ajax({
                                url: '@Url.Action("EditExportingData", "Documentation")',
                                type: 'POST',
                                contentType: 'application/json',
                                data: JSON.stringify({
                                    SelectedTemplate: selectedTemplate,
                                    RefCd: refCd,
                                    ValueForCells: valueForCells
                                }),
                                success: function (response) {
                                    if (response.success) {
                                        alert(response.message);
                                        // Hide the "Save Edits" button after saving
                                        saveEditsButton.remove();
                                    } else {
                                        alert("Error: " + response.message);
                                    }
                                },
                                error: function () {
                                    alert("An error occurred while editing exporting data.");
                                }
                            });
                        }
                    });
                }
            });

            // Delete row
            $("#cellValuesContainer").on("click", ".deleteRow", function () {
                var row = $(this).closest(".cellValueRow");
                var refCd = row.find("select").val();
                var valueForCells = row.find("input").val();
                var selectedTemplate = $("select[name='selectedTemplate']").val();

                if (confirm("Are you sure you want to delete this row?")) {
                    $.ajax({
                        url: '@Url.Action("DeleteExportingData", "Documentation")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            SelectedTemplate: selectedTemplate,
                            RefCd: refCd,
                            ValueForCells: valueForCells
                        }),
                        success: function (response) {
                            if (response.success) {
                                alert(response.message);
                                row.remove();
                                adjustIndices();
                            } else {
                                alert("Error: " + response.message);
                            }
                        },
                        error: function () {
                            alert("An error occurred while deleting exporting data.");
                        }
                    });
                }
            });

            function adjustIndices() {
                $("#cellValuesContainer .cellValueRow").each(function (index) {
                    $(this).find("select").attr("name", `exellCellsMappingInfo[${index}].RefCd`);
                    $(this).find("input").attr("name", `exellCellsMappingInfo[${index}].ValueForCells`);
                });
            }

            // Save exporting data
            $("#saveExportingData").click(function () {
                var formData = $("form").serializeArray();
                var exellCellsMappingInfo = [];
                var selectedTemplate = $("select[name='selectedTemplate']").val();

                formData.forEach(function (item) {
                    if (item.name.startsWith("exellCellsMappingInfo")) {
                        var index = item.name.match(/\[(\d+)\]/)[1];
                        if (!exellCellsMappingInfo[index]) {
                            exellCellsMappingInfo[index] = {};
                        }
                        exellCellsMappingInfo[index][item.name.split(".")[1]] = item.value;
                    }
                });

                exellCellsMappingInfo = exellCellsMappingInfo.filter(function (item) {
                    return item;
                });

                var data = {
                    exellCellsMappingInfo: exellCellsMappingInfo,
                    selectedTemplate: selectedTemplate
                };

                // Check for null values
                var nullValues = findNullValues(exellCellsMappingInfo);
                if (nullValues.length > 0) {
                    alert("Null values found. Please fill in all fields before saving.");
                    highlightNullValues(nullValues);
                    return;
                }

                // Check for duplicates before saving
                var duplicates = findDuplicates(exellCellsMappingInfo);
                if (duplicates.length > 0) {
                    alert("Duplicate entries found. Please correct them before saving.");
                    highlightDuplicates(duplicates);
                    return;
                }

                $.ajax({
                    url: '@Url.Action("SaveExportingData", "Documentation")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                        } else {
                            alert("Error: " + response.message);
                        }
                    },
                    error: function () {
                        alert("An error occurred while saving exporting data.");
                    }
                });
            });

            function findNullValues(exellCellsMappingInfo) {
                var nullValues = [];

                exellCellsMappingInfo.forEach(function (item, index) {
                    if (!item.RefCd || !item.ValueForCells) {
                        nullValues.push(index);
                    }
                });

                return nullValues;
            }

            function highlightNullValues(nullValues) {
                nullValues.forEach(function (index) {
                    var row = $(`[name="exellCellsMappingInfo[${index}].RefCd"]`).closest(".cellValueRow");
                    row.css("border", "2px solid red");
                });
            }

            function findDuplicates(exellCellsMappingInfo) {
                var duplicates = [];
                var seen = {};

                exellCellsMappingInfo.forEach(function (item, index) {
                    var key = item.RefCd + "-" + item.ValueForCells;
                    if (seen[key]) {
                        duplicates.push(index);
                    } else {
                        seen[key] = true;
                    }
                });

                return duplicates;
            }

            function highlightDuplicates(duplicates) {
                duplicates.forEach(function (index) {
                    var row = $(`[name="exellCellsMappingInfo[${index}].RefCd"]`).closest(".cellValueRow");
                    row.css("border", "2px solid red");
                });
            }
        });

        function showHelpPopup() {
            document.getElementById("helpModal").style.display = "block";
        }

        function closeHelpPopup() {
            document.getElementById("helpModal").style.display = "none";
        }
    </script>
}

