@{
    ViewData["Title"] = "Upload and Export Excel Workbook";
}

<h2>@ViewData["Title"]</h2>

<div class="container">
    <div class="formContainer">
        <!-- Back Button -->
        <div style="text-align: left; margin-bottom: 20px;">
            <a href="/ExcelMapping_Documentation" class="btn btn-secondary">Back</a>
        </div>
        <div class="formContent">
            <!-- Directory Dropdown -->
            <div class="form-group">
                <label for="selectedDirectory">Select Directory:</label>
                <select id="selectedDirectory" name="selectedDirectory" class="form-control" required onchange="updateSelectedDirectory(this.value)">
                    <option value="">-- Select Directory --</option>
                    @foreach (var directory in ViewBag.Directories)
                    {
                        <option value="@directory">@directory</option>
                    }
                </select>
            </div>

            <!-- Workbook Dropdown -->
            <div class="form-group">
                <label for="selectedWorkbook">Select Workbook:</label>
                <select id="selectedWorkbook" name="selectedWorkbook" class="form-control" required onchange="fetchDescriptions(this.value)">
                    <option value="">-- Select Workbook --</option>
                    @if (ViewBag.Workbooks != null)
                    {
                        @foreach (var workbook in ViewBag.Workbooks)
                        {
                            <option value="@workbook">@workbook</option>
                        }
                    }
                </select>
            </div>

            <!-- Hidden Table -->
            <div id="descriptionTableContainer" style="display: none; margin-top: 20px;">
                <table id="descriptionTable" class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Excel Sheet</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows will be populated dynamically -->
                    </tbody>
                </table>
            </div>

            <!-- Export to Excel Button -->
            <div class="buttonContainer">
                <button type="button" id="exportToExcelButton" class="btn btn-success">Export to Excel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Update Workbook Dropdown when Directory is selected
        function updateSelectedDirectory(value) {
            $.ajax({
                url: '@Url.Action("GetWorkbooksByDirectory", "ExcelMapping_Documentation")',
                type: 'GET',
                data: { selectedDirectory: value },
                success: function (response) {
                    $("#selectedWorkbook").empty().append('<option value="">-- Select Workbook --</option>');
                    response.forEach(function (workbook) {
                        $("#selectedWorkbook").append('<option value="' + workbook + '">' + workbook + '</option>');
                    });
                },
                error: function () {
                    alert("An error occurred while fetching workbooks.");
                }
            });
        }

        // Fetch Descriptions for Selected Workbook
        function fetchDescriptions(selectedWorkbook) {
            if (!selectedWorkbook) {
                $("#descriptionTableContainer").hide(); // Hide table if no workbook is selected
                return;
            }

            $.ajax({
                url: '@Url.Action("GetDescriptionsForWorkbook", "ExcelMapping_Documentation")',
                type: 'GET',
                data: { selectedWorkbook: selectedWorkbook },
                success: function (response) {
                    if (Object.keys(response).length > 0) {
                        // Clear existing rows
                        $("#descriptionTable tbody").empty();

                        // Loop through each Excel Sheet
                        for (var sheet in response) {
                            if (response.hasOwnProperty(sheet)) {
                                // Add Excel Sheet as a subheading
                                $("#descriptionTable tbody").append(
                                    `<tr class="sheet-heading">
                                        <td colspan="2">${sheet}</td>
                                    </tr>`
                                );

                                // Add descriptions for the current sheet
                                response[sheet].forEach(function (description) {
                                    $("#descriptionTable tbody").append(
                                        `<tr>
                                            <td></td> <!-- Empty cell for indentation -->
                                            <td>${description}</td>
                                        </tr>`
                                    );
                                });
                            }
                        }

                        // Show the table
                        $("#descriptionTableContainer").show();
                    } else {
                        // Hide the table if no data is returned
                        $("#descriptionTableContainer").hide();
                    }
                },
                error: function () {
                    alert("An error occurred while fetching descriptions.");
                }
            });
        }

        // Export to Excel Button Click Event
        $("#exportToExcelButton").click(function () {
            // Collect the form data
            var selectedDirectory = $("#selectedDirectory").val();
            var selectedWorkbook = $("#selectedWorkbook").val();

            // Validate selected workbook
            if (!selectedWorkbook) {
                alert("Please select a workbook before exporting.");
                return;
            }

            // Create a hidden form and submit it
            var form = document.createElement("form");
            form.method = "POST";
            form.action = "@Url.Action("ExportFinancialDataToExcel", "ExcelMapping_Documentation")";

            // Add selectedDirectory
            var directoryInput = document.createElement("input");
            directoryInput.type = "hidden";
            directoryInput.name = "selectedDirectory";
            directoryInput.value = selectedDirectory;
            form.appendChild(directoryInput);

            // Add selectedWorkbook
            var workbookInput = document.createElement("input");
            workbookInput.type = "hidden";
            workbookInput.name = "selectedWorkbook";
            workbookInput.value = selectedWorkbook;
            form.appendChild(workbookInput);

            // Append the form to the body and submit it
            document.body.appendChild(form);
            form.submit();
        });
    </script>
}
<style>
    .container {
        margin: 20px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .breadcrumb {
        display: flex; /* Arrange breadcrumb items in a horizontal row */
        flex-wrap: nowrap; /* Prevent wrapping to the next line */
        background-color: #f8f9fa; /* Optional: Background color for breadcrumb */
        padding: 8px 16px;
        border-radius: 5px;
        margin-bottom: 20px;
        list-style: none; /* Remove default list styling */
    }

    .breadcrumb-item {
        margin-right: 8px; /* Space between breadcrumb items */
        font-size: 1rem;
        color: #007bff; /* Default link color */
    }

        .breadcrumb-item a {
            text-decoration: none; /* Remove underline from links */
            color: #007bff; /* Link color */
            transition: color 0.3s ease; /* Smooth hover transition */
        }

            .breadcrumb-item a:hover {
                color: #0056b3; /* Darker shade on hover */
            }

    .cellValueRow {
        margin-bottom: 15px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #ffffff;
    }

        .cellValueRow label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .cellValueRow input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .cellValueRow button {
            margin-top: 5px;
            margin-right: 5px; /* Add margin between buttons */
        }

    .buttonContainer {
        text-align: center;
        margin-top: 20px;
    }

        .buttonContainer button {
            margin: 5px;
            padding: 10px 20px;
        }

    .formContainer {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
        position: relative;
    }

    .formContent {
        flex-grow: 1;
        overflow-y: auto;
    }

    .form-group {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #ffffff;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

    .helpIcon {
        position: absolute;
        bottom: 10px;
        right: 10px;
        cursor: pointer;
        font-size: 20px;
        color: #007bff;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        text-align: center;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

     /* Remove borders between rows */
     #descriptionTable tbody tr {
         border: none; /* Remove border for rows */
     }

     #descriptionTable tbody td {
         border: none; /* Remove border for cells */
     }

     /* Style for Excel Sheet subheadings */
     .sheet-heading {
         background-color: #f8f9fa; /* Light gray background */
         font-weight: bold; /* Bold text */
         padding: 10px; /* Add padding */
     }
</style>