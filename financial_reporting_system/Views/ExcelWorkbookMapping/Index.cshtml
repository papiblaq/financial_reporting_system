@using financial_reporting_system.Controllers
@model List<ExcelWorkbookMappingController.FinancialStatementDetail>

@{
    Layout = null;
    ViewData["Title"] = "Report mapping";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- Syncfusion ASP.NET Core controls styles -->
    <link href="https://cdn.syncfusion.com/ej2/26.1.35/bootstrap5-dark.css" rel="stylesheet" />
    <!-- Syncfusion ASP.NET Core controls scripts -->
    <script src="https://cdn.syncfusion.com/ej2/26.1.35/dist/ej2.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">


    <style>
        .breadcrumb-modern {
            display: flex;
            justify-content: space-between; /* Distributes items evenly */
            align-items: center;
            flex-wrap: wrap;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 8px;
            list-style: none;
            width: 100%;
        }

            .breadcrumb-modern .breadcrumb-item {
                flex: 1; /* Makes each item take equal space */
                text-align: center; /* Centers text */
            }

                .breadcrumb-modern .breadcrumb-item a {
                    display: inline-block;
                    padding: 10px 15px;
                    background-color: #00CC00; /* Green background */
                    color: white;
                    text-decoration: none;
                    border-radius: 20px;
                    font-size: 14px;
                    font-weight: 500;
                    transition: all 0.3s ease-in-out;
                    width: 80%; /* Adjust width to prevent overly stretched buttons */
                }

                    .breadcrumb-modern .breadcrumb-item a:hover {
                        background-color: #339933; /* Darker green on hover */
                        transform: scale(1.05);
                    }

                .breadcrumb-modern .breadcrumb-item::after {
                    content: ">";
                    color: #00CC00;
                    font-weight: bold;
                    margin-left: 10px;
                }

                .breadcrumb-modern .breadcrumb-item:last-child::after {
                    content: "";
                }

        .container {
            margin: 20px auto;
            padding: 20px;
            max-width: 1200px;
            max-height: calc(100vh - 40px); /* Adjusted to fit above the bottom */
            overflow-y: auto;
            background-color: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-family: 'Arial', sans-serif;
        }


            .container h1 {
                font-size: 1.5rem;
                color: #333;
                margin-bottom: 10px;
            }

            .container select {
                display: block;
                padding: 8px;
                margin-top: 10px;
                font-size: 1rem;
                border: 1px solid #ccc;
                border-radius: 4px;
                width: 100%;
                max-width: 300px;
            }

        .custom-label {
            font-weight: bold;
            font-size: 1rem;
            margin-bottom: 5px;
        }



        /* Define the white-grid class */
        .white-grid {
            background-color: white !important; /* Set the background color to white */
            color: black; /* Set the text color to black */
        }

            /* Style the header */
            .white-grid .e-gridheader {
                background-color: white !important; /* Set the header background color to white */
                color: aquamarine; /* Set the header text color to black */
                border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of the header */
            }

            /* Style the rows */
            .white-grid .e-gridcontent .e-rowcell {
                background-color: white; /* Set the row cell background color to white */
                color: #6c757d !important; /* Set the row cell text color to #6c757d */
                border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of each row */
                border: none;
            }
            /* Style the rows on hover */
            .white-grid .e-gridcontent .e-row:hover .e-rowcell {
                background-color: lightgray !important;
                color: aquamarine !important; /* Set the row cell text color to aquamarine on hover */
            }

            /* Style the pager */
            .white-grid .e-gridpager {
                background-color: white; /* Set the pager background color to white */
                color: black; /* Set the pager text color to black */
                border-top: 1px solid #dee2e6; /* Add a border at the top of the pager */
            }

            /* Style the filter row */
            .white-grid .e-filterbarcell {
                background-color: white !important; /* Set the filter row background color to white */
                color: InactiveCaptionText !important; /* Set the filter row text color to black */
                border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of the filter row */
            }

                /* Style the filter input */
                .white-grid .e-filterbarcell input {
                    background-color: white; /* Set the filter input background color to white */
                    color: #6c757d !important; /* Set the filter input text color to #6c757d */
                    border: 1px solid #ced4da; /* Add a border to the filter input */
                }

                /* Style the filter dropdown */
                .white-grid .e-filterbarcell .e-dropdownlist {
                    background-color: white !important; /* Set the filter dropdown background color to white */
                    color: #6c757d; /* Set the filter dropdown text color to #6c757d */
                    border: 1px solid #ced4da; /* Add a border to the filter dropdown */
                }

                    /* Style the filter dropdown options */
                    .white-grid .e-filterbarcell .e-dropdownlist .e-list-item {
                        background-color: white; /* Set the filter dropdown option background color to white */
                        color: #6c757d; /* Set the filter dropdown option text color to #6c757d */
                    }

                        /* Style the filter dropdown options on hover */
                        .white-grid .e-filterbarcell .e-dropdownlist .e-list-item:hover {
                            background-color: hotpink !important; /* Set the filter dropdown option background color on hover */
                            color: aquamarine !important; /* Set the filter dropdown option text color on hover */
                        }

                        /* Style the filter dropdown options on focus */
                        .white-grid .e-filterbarcell .e-dropdownlist .e-list-item.e-active {
                            background-color: #e9ecef; /* Set the filter dropdown option background color on focus */
                            color: #6c757d; /* Set the filter dropdown option text color on focus */
                        }

        .button-container {
            display: flex; /* Use Flexbox */
            justify-content: center; /* Center horizontally */
            align-items: center; /* Center vertically */
            margin-top: 20px; /* Add space above the button */
        }

        .custom-delete-button {
            background-color: #d9534f; /* Red background color */
            color: white; /* White text color */
            border: none; /* No border */
            padding: 10px 20px; /* Padding for spacing */
            font-size: 16px; /* Font size */
            border-radius: 5px; /* Rounded corners */
            cursor: pointer; /* Pointer cursor on hover */
            transition: background-color 0.3s ease; /* Smooth transition effect */
        }

            .custom-delete-button:hover {
                background-color: #c9302c; /* Darker red on hover */
            }

        .grid-spacer {
            height: 20px; /* Spacer height between the grids */
        }

        h1 {
            font-size: 18px; /* Smaller font size */
            color: #6c757d; /* Greyish color */
            font-weight: normal; /* Normal font weight */
            margin-bottom: 10px; /* Margin below the heading */
        }

        .custom-label {
            font-size: 18px; /* Smaller font size */
            color: #6c757d; /* Greyish color */
            font-weight: normal; /* Normal font weight */
            margin-bottom: 10px; /* Margin below the heading */
        }

        #pageSizeDropdown {
            margin-top: 5px;
        }

        .button-container {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .custom-delete-button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .custom-delete-button:hover {
                background-color: #0056b3;
            }

        .btn-secondary {
            text-decoration: none;
            background-color: #6c757d;
            color: white;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
            }



        /* Navigation buttons container */
        .nav-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        /* Navigation buttons container */
        .nav-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        /* Right-side buttons container */
        .right-buttons {
            display: flex;
            gap: 10px; /* Space between Next and Previous buttons */
        }

        /* Common styles for buttons */
        .nav-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 45px;
            height: 45px;
            background-color: #00CC00;
            color: white;
            text-decoration: none;
            border-radius: 50%;
            font-size: 20px;
            transition: all 0.3s ease-in-out;
        }

            /* Hover effect */
            .nav-button:hover {
                background-color: #339933;
                transform: scale(1.1);
            }

        /* Specific styles for back, previous, and next buttons */
        .back-button {
            margin-left: 10px;
        }

        .prev-button {
        }

        .next-button {
            margin-right: 10px;
        }


    </style>



</head>
<body>


    <div class="container">
        <!-- Navigation Buttons -->
        <div class="nav-buttons">
            <!-- Back Button -->
            <a href="@Url.Action("ExcelWorkbookUpload", "ExcelMapping_Documentation")" class="nav-button back-button">
                <i class="fa-solid fa-house"></i>
            </a>

            <div class="right-buttons">
                <!-- Previous Button (Inverted Next) -->
                <a href="@Url.Action("Index", "ExcelWorkbook_Statement_Details")" class="nav-button prev-button">
                    <i class="fa-solid fa-share fa-flip-horizontal"></i>
                </a>

                <!-- Next Button -->
                <a href="@Url.Action("Index", "ExcelMapping_Documentation")" class="nav-button next-button">
                    <i class="fa-solid fa-share"></i>
                </a>
            </div>
        </div>
        <!-- Breadcrumb Navigation -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb breadcrumb-modern">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "ExcelWorkbook_Statement_types")">Report type</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "ExcelWorkbook_Statement_Sheet")">Report</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "ExcelWorkbook_Statement_Header")">Report header</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "ExcelWorkbook_Statement_Details")">Report details</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "ExcelWorkbookMapping")">Report mappings</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "ExcelMapping_Documentation")">Report cells</a></li>
            </ol>
        </nav>


        <h2>@ViewData["Title"]</h2>


        <!-- Workbook Dropdown -->
        <div class="form-group">
            <label for="SelectedWorkbook">Workbook</label>
            <select id="SelectedWorkbook" class="form-control">
                <option value="">-- Select Workbook --</option>
                @foreach (var workbook in ViewBag.Workbooks)
                {
                    <option value="@workbook.Value">@workbook.Text</option>
                }
            </select>
        </div>

        <!-- Statement Type Dropdown -->
        <div class="form-group">
            <label for="statementTypeDropdown">Worksheet</label>
            <select id="statementTypeDropdown" class="form-control">
                <option value="">-- Select a Worksheet --</option>
                @foreach (var stmId in ViewBag.StatementTypes as List<string>)
                {
                    <option value="@stmId">@stmId</option> <!-- Use STMNT_ID as both value and text -->
                }
            </select>
        </div>

        <!-- Invisible input field to store the selected workbook value -->
        <input type="hidden" id="selectedWorkbookInput" name="selectedWorkbook" />



        <h1 class="mt-5">Available Statement Details for @ViewBag.SelectedDescription</h1>
       
        <!-- First Grid -->
        @{
            var gridToolbar = new string[] { "Search" };
        }

        <ejs-grid id="grid" dataSource="@Model" allowPaging="true" allowSorting="true"
                  allowFiltering="true" allowGrouping="false" cssClass="white-grid"
                  allowResizing="true" allowReordering="true" toolbar="@gridToolbar">

            <e-grid-pagesettings pageSize="5"></e-grid-pagesettings>
            <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>

            <e-grid-columns>
                <e-grid-column type="checkbox" width="50"></e-grid-column>
               
                <e-grid-column field="REF_CD" headerText="Reference Code"
                               textAlign="Right" width="200"></e-grid-column>
                <e-grid-column field="DESCRIPTION" headerText="Description"
                               textAlign="Right" width="500" ></e-grid-column>
                <e-grid-column field="SYS_CREATE_TS" headerText="System Create Timestamp"
                               textAlign="Right" width="120" format="yMd" ></e-grid-column>
                <e-grid-column field="CREATED_BY" headerText="Created By"
                               textAlign="Right" width="120" ></e-grid-column>
            </e-grid-columns>

        </ejs-grid>



        <!-- Spacer between grids -->
        <div class="grid-spacer"></div>

        <h1 class="mt-5">Available Ledgers</h1>
        <!-- Dropdown for Page Size Selection -->
        <div class="mb-3">
            <label for="pageSizeDropdown" class="custom-label">Rows to be fetched:</label>
            <select id="pageSizeDropdown" class="form-select" style="width: 200px;">
                <option value="20" selected>20</option>
                <option value="40">40</option>
                <option value="80">80</option>
                <option value="160">160</option>
              
            </select>
        </div>

        <!-- Second Grid -->
        @{
            var accountGridToolbar = new string[] { "Search" };
        }

        <ejs-grid id="accountGrid" dataSource="@ViewBag.AccountDetails" allowPaging="true"
                  allowSorting="true" allowFiltering="true" allowGrouping="false" cssClass="white-grid"
                  allowResizing="true" allowReordering="true" toolbar="@accountGridToolbar">

            <e-grid-pagesettings pageSize="10"></e-grid-pagesettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>

            <e-grid-columns>
                <e-grid-column type="checkbox" width="50"></e-grid-column>
                <e-grid-column field="LEDGER_NO" headerText="Ledger No" textAlign="Right" width="150" ></e-grid-column>
                <e-grid-column field="GL_ACCT_NO" headerText="Ledger Account" textAlign="Right" width="150"></e-grid-column>
                <e-grid-column field="ACCT_DESC" headerText="Account Description" textAlign="Right" width="350" ></e-grid-column>
            </e-grid-columns>

        </ejs-grid>


        <!-- Buttons -->
        <div class="button-container">
            <!-- Save MappedGL Button -->
            <button id="saveCombinedRows" class="custom-delete-button">Save MappedGL</button>

            <!-- Uploading Button (Initially Hidden) -->
            <button id="uploadingButton" class="custom-delete-button" style="display: none;" disabled>
                Uploading...
            </button>
        </div>
        <div class="button-container">
            <a href="@Url.Action("Grid", "ExcelWorkbookMapping")" class="btn btn-secondary">View Mapped GL</a>
        </div>
    </div>



    <script>


        // Event listener for Workbook Dropdown change
               document.getElementById('SelectedWorkbook').addEventListener('change', function () {
            var selectedWorkbook = this.value; // Get the selected workbook value
            console.log('Selected Workbook:', selectedWorkbook); // Debugging
            if (selectedWorkbook) {
                console.log('Fetching sheet names for workbook:', selectedWorkbook); // Debugging
                // Fetch sheet names for the selected workbook
                fetch(`/ExcelWorkbookMapping/GetStatementTypesByWorkbook?workbook=${encodeURIComponent(selectedWorkbook)}`)
                    .then(response => {
                        console.log('Response received:', response); // Debugging
                        if (!response.ok) {
                            throw new Error('Network response was not ok: ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Data received:', data); // Debugging
                        var statementTypeDropdown = document.getElementById('statementTypeDropdown');
                        statementTypeDropdown.innerHTML = '<option value="">-- Select a Worksheet --</option>'; // Reset dropdown
                        // Populate the dropdown with fetched sheet names
                        data.forEach(sheetName => {
                            console.log('Processing sheet name:', sheetName); // Debugging
                            var option = document.createElement('option');
                            option.value = sheetName; // Use the sheet name as both value and text
                            option.text = sheetName; // Use the sheet name as both value and text
                            statementTypeDropdown.appendChild(option);
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching sheet names:', error); // Debugging
                    });
            } else {
                console.log('No workbook selected. Clearing dropdown.'); // Debugging
                // Clear the Statement Type Dropdown if no workbook is selected
                document.getElementById('statementTypeDropdown').innerHTML = '<option value="">-- Select a Worksheet --</option>';
            }
        });

        // Event listener for Statement Type Dropdown change
        document.getElementById('statementTypeDropdown').addEventListener('change', function () {
            var selectedValue = this.value; // Get the STMNT_ID

            if (selectedValue) {
                // Reload the entire page with the selected STMNT_ID as a query parameter
                window.location.href = `/ExcelWorkbookMapping/Index?stmntId=${encodeURIComponent(selectedValue)}`;
            } else {
                alert('Please select a valid statement type.');
            }
        });

        // Event listener for page size dropdown change
        document.getElementById('pageSizeDropdown').addEventListener('change', function () {
            var selectedPageSize = parseInt(this.value); // Get the selected value as an integer

            // Get the grid instance
            var accountGrid = document.getElementById('accountGrid').ej2_instances[0];

            // Update the pageSize of the grid
            accountGrid.pageSettings.pageSize = selectedPageSize;
        });





        document.addEventListener('DOMContentLoaded', function () {
            var orderGrid = document.getElementById('grid').ej2_instances[0]; // Get Syncfusion Grid instance

            // ✅ Function to handle row selection & reload with new DETAIL_ID
            function handleRowSelection(args) {
                var selectedRow = orderGrid.getSelectedRecords()[0]; // Get selected row
                if (selectedRow) {
                    var DETAIL_ID = selectedRow.DETAIL_ID; // Capture DETAIL_ID

                    // ✅ If the selected DETAIL_ID is different, update and reload
                    if (sessionStorage.getItem('selectedDetailId') !== DETAIL_ID.toString()) {
                        sessionStorage.setItem('selectedDetailId', DETAIL_ID); // Save new DETAIL_ID

                        var selectedValue = '@ViewBag.SelectedDescription'; // Get STMNT_ID from ViewBag
                        if (DETAIL_ID && selectedValue) {
                            var newUrl = `/ExcelWorkbookMapping/Index?stmntId=${encodeURIComponent(selectedValue)}&detailId=${encodeURIComponent(DETAIL_ID)}`;
                            window.location.href = newUrl; // ✅ Reload with updated DETAIL_ID
                        } else {
                            console.error('DETAIL_ID or STMNT_ID is missing');
                        }
                    } else {
                        console.log('DETAIL_ID is the same as the stored one, no reload needed');
                    }
                } else {
                    console.error('No row selected');
                }
            }

            // ✅ Assign rowSelected event to handle row selection
            orderGrid.rowSelected = handleRowSelection;

            // ✅ After page reload, reselect the previously selected row WITHOUT triggering rowSelected event
            setTimeout(() => {
                var storedDetailId = sessionStorage.getItem('selectedDetailId'); // Retrieve stored DETAIL_ID
                if (storedDetailId) {
                    var gridData = orderGrid.getCurrentViewRecords(); // Get grid data
                    var selectedRecord = gridData.find(record => record.DETAIL_ID == storedDetailId);

                    if (selectedRecord) {
                        var rowIndex = gridData.indexOf(selectedRecord); // Get row index
                        if (rowIndex !== -1) {
                            // ✅ Temporarily disable event listener to prevent reload loop
                            orderGrid.rowSelected = null;

                            orderGrid.selectRows([rowIndex]); // ✅ Reselect row

                            // ✅ Re-enable row selection after a delay
                            setTimeout(() => {
                                orderGrid.rowSelected = handleRowSelection; // ✅ Re-enable row selection
                            }, 1000);
                        }
                    }
                }
            }, 1500); // Delay to ensure grid is fully loaded
        });








        // Event listener for saving combined rows
               document.getElementById('saveCombinedRows').addEventListener('click', function () {
            var saveButton = document.getElementById('saveCombinedRows');
            var uploadingButton = document.getElementById('uploadingButton');

            var orderGrid = document.getElementById('grid').ej2_instances[0];
            var accountGrid = document.getElementById('accountGrid').ej2_instances[0];

            var selectedOrderRow = orderGrid.getSelectedRecords();
            var selectedAccountRows = accountGrid.getSelectedRecords();

            // Ensure exactly one row is selected in the first grid
            if (selectedOrderRow.length !== 1) {
                alert('Please select exactly one row in the first grid.');
                return;
            }

            if (selectedAccountRows.length === 0) {
                alert('No rows selected in the account grid.');
                return;
            }

            // Hide "Save MappedGL" and show "Uploading..."
            saveButton.style.display = 'none';
            uploadingButton.style.display = 'inline-block';

            var combinedRows = selectedAccountRows.map(accountRow => ({
                DETAIL_ID: selectedOrderRow[0].DETAIL_ID,
                STMNT_ID: selectedOrderRow[0].STMNT_ID,
                SHEET_ID: selectedOrderRow[0].SHEET_ID,
                HEADER_ID: selectedOrderRow[0].HEADER_ID,
                GL_ACCT_CAT_CD: selectedOrderRow[0].GL_ACCT_CAT_CD,
                REF_CD: selectedOrderRow[0].REF_CD,
                DESCRIPTION: selectedOrderRow[0].DESCRIPTION,
                SYS_CREATE_TS: selectedOrderRow[0].SYS_CREATE_TS,
                CREATED_BY: selectedOrderRow[0].CREATED_BY,
                LEDGER_NO: accountRow.LEDGER_NO,
                ACCT_DESC: accountRow.ACCT_DESC
            }));

            fetch('/ExcelWorkbookMapping/SaveCombinedRows', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(combinedRows)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                alert(data.message || 'Upload successful.');
                // Restore buttons after alert is dismissed
                saveButton.style.display = 'inline-block';
                uploadingButton.style.display = 'none';

                // Reload the page to reflect saved data
                location.reload();
            })
            .catch(error => {
                alert('Error: ' + error.message);
                // Restore buttons in case of failure
                saveButton.style.display = 'inline-block';
                uploadingButton.style.display = 'none';
            });
        });
    </script>



    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <ejs-scripts></ejs-scripts>
</body>
</html>