@using syncfusion_grid.Controllers
@model List<MappingController.FinancialStatementDetail>

@{
    ViewData["Title"] = "Index";
}

<div class="container">
    <h1 class="mt-5">Select a Financial Statement Type</h1>
    <select id="statementTypeDropdown">
    <option value="">-- Select a Statement Type --</option>
    @foreach (var item in ViewBag.StatementTypes)
    {
        <option value="@item.STMNT_ID">@item.DESCRIPTION</option>
    }
</select>

    <h1 class="mt-5">Available Statement details for @ViewBag.SelectedDescription</h1>
    <!-- First Grid -->
    <ejs-grid id="grid" dataSource="@Model" allowPaging="true" allowSorting="true" allowFiltering="true" allowGrouping="false" cssClass="white-grid">
        <e-grid-pagesettings pageSize="5"></e-grid-pagesettings>
        <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>
        <e-grid-columns>
            <e-grid-column type="checkbox" width="50"></e-grid-column>
            
            <e-grid-column field="GL_ACCT_CAT_CD" headerText="GL Account Category Code" textAlign="Right" width="200"></e-grid-column>
            <e-grid-column field="REF_CD" headerText="Reference Code" textAlign="Right" width="200"></e-grid-column>
            <e-grid-column field="DESCRIPTION" headerText="Description" textAlign="Right" width="500"></e-grid-column>
            <e-grid-column field="SYS_CREATE_TS" headerText="System Create Timestamp" textAlign="Right" width="120" format="yMd"></e-grid-column>
            <e-grid-column field="CREATED_BY" headerText="Created By" textAlign="Right" width="120"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>

    <!-- Spacer between grids -->
    <div class="grid-spacer"></div>

    <h1 class="mt-5">Unmapped GL</h1>
    <!-- Dropdown for Page Size Selection -->
    <div class="mb-3">
        <label for="pageSizeDropdown" class="custom-label">Rows to be fetched:</label>

        <select id="pageSizeDropdown" class="form-select" style="width: 200px;">
            <option value="20" selected>20</option>
            <option value="60">60</option>
            <option value="100">100</option>
            <option value="150">150</option>
            <option value="400">400</option>
            <option value="600">600</option>
        </select>
    </div>

    <!-- Second Grid -->
    <ejs-grid id="accountGrid" dataSource="@ViewBag.AccountDetails" allowPaging="true" allowSorting="true" allowFiltering="true" allowGrouping="false" cssClass="white-grid">
        <e-grid-pagesettings pageSize="15"></e-grid-pagesettings> <!-- Default page size is 15 -->
        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
        <e-grid-columns>
            <e-grid-column type="checkbox" width="50"></e-grid-column>
            <e-grid-column field="GL_ACCT_CAT_CD" headerText="GL Account Category Code" textAlign="Right" width="150"></e-grid-column>
            <e-grid-column field="GL_ACCT_ID" headerText="GL Account ID" textAlign="Right" width="150"></e-grid-column>
            <e-grid-column field="GL_ACCT_NO" headerText="GL Account No" textAlign="Right" width="250"></e-grid-column>
            <e-grid-column field="LEDGER_NO" headerText="Ledger No" textAlign="Right" width="150"></e-grid-column>
            <e-grid-column field="ACCT_DESC" headerText="Account Description" textAlign="Right" width="350"></e-grid-column>
            <e-grid-column field="BAL_CD" headerText="Balance Code" textAlign="Right" width="150"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>

    <!-- Centered Button -->
    <div class="button-container">
        <button id="saveCombinedRows" class="custom-delete-button">Save MappedGL</button>
    </div>

    <!-- Add the "View Grid" button -->
    <div class="button-container">
        <a asp-action="Grid" class="btn btn-secondary">View Mapped GL</a>
    </div>
</div>

<style>




     #statementTypeDropdown {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        font-family: Arial, sans-serif;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #f9f9f9;
        cursor: pointer;
        transition: border-color 0.3s ease;
    }

    #statementTypeDropdown:hover {
        border-color: #888;
    }

    #statementTypeDropdown:focus {
        border-color: #5b9bd5;
        outline: none;
        box-shadow: 0 0 3px rgba(91, 155, 213, 0.5);
    }

    #statementTypeDropdown option {
        padding: 10px;
        font-size: 16px;
    }


    .container {
        margin: 20px 10px; /* Margin around the container */
        padding: 0px; /* Padding inside the container */
        border: 1px solid #ddd; /* Optional: border for the container */
        border-radius: 8px; /* Rounded corners for the container */
        background-color: #f8f9fa; /* Light grey background for the container */
    }

    /* Define the white-grid class */
    .white-grid {
        background-color: white !important; /* Set the background color to white */
        color: black; /* Set the text color to black */
    }

        /* Style the header */
        .white-grid .e-gridheader {
            background-color: white !important; /* Set the header background color to white */
            color: aquamarine; /* Set the header text color to black */
            border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of the header */
        }

        /* Style the rows */
        .white-grid .e-gridcontent .e-rowcell {
            background-color: white; /* Set the row cell background color to white */
            color: #6c757d !important; /* Set the row cell text color to #6c757d */
            border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of each row */
            border: none;
        }
        /* Style the rows on hover */
        .white-grid .e-gridcontent .e-row:hover .e-rowcell {
            background-color: lightgray !important;
            color: aquamarine !important; /* Set the row cell text color to aquamarine on hover */
        }

        /* Style the pager */
        .white-grid .e-gridpager {
            background-color: white; /* Set the pager background color to white */
            color: black; /* Set the pager text color to black */
            border-top: 1px solid #dee2e6; /* Add a border at the top of the pager */
        }

        /* Style the filter row */
        .white-grid .e-filterbarcell {
            background-color: white !important; /* Set the filter row background color to white */
            color: InactiveCaptionText !important; /* Set the filter row text color to black */
            border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of the filter row */
        }

            /* Style the filter input */
            .white-grid .e-filterbarcell input {
                background-color: white; /* Set the filter input background color to white */
                color: #6c757d !important; /* Set the filter input text color to #6c757d */
                border: 1px solid #ced4da; /* Add a border to the filter input */
            }

            /* Style the filter dropdown */
            .white-grid .e-filterbarcell .e-dropdownlist {
                background-color: white !important; /* Set the filter dropdown background color to white */
                color: #6c757d; /* Set the filter dropdown text color to #6c757d */
                border: 1px solid #ced4da; /* Add a border to the filter dropdown */
            }

                /* Style the filter dropdown options */
                .white-grid .e-filterbarcell .e-dropdownlist .e-list-item {
                    background-color: white; /* Set the filter dropdown option background color to white */
                    color: #6c757d; /* Set the filter dropdown option text color to #6c757d */
                }

                    /* Style the filter dropdown options on hover */
                    .white-grid .e-filterbarcell .e-dropdownlist .e-list-item:hover {
                        background-color: hotpink !important; /* Set the filter dropdown option background color on hover */
                        color: aquamarine !important; /* Set the filter dropdown option text color on hover */
                    }

                    /* Style the filter dropdown options on focus */
                    .white-grid .e-filterbarcell .e-dropdownlist .e-list-item.e-active {
                        background-color: #e9ecef; /* Set the filter dropdown option background color on focus */
                        color: #6c757d; /* Set the filter dropdown option text color on focus */
                    }

    .button-container {
        display: flex; /* Use Flexbox */
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        margin-top: 20px; /* Add space above the button */
    }

    .custom-delete-button {
        background-color: #d9534f; /* Red background color */
        color: white; /* White text color */
        border: none; /* No border */
        padding: 10px 20px; /* Padding for spacing */
        font-size: 16px; /* Font size */
        border-radius: 5px; /* Rounded corners */
        cursor: pointer; /* Pointer cursor on hover */
        transition: background-color 0.3s ease; /* Smooth transition effect */
    }

        .custom-delete-button:hover {
            background-color: #c9302c; /* Darker red on hover */
        }

    .grid-spacer {
        height: 20px; /* Spacer height between the grids */
    }

    h1 {
        font-size: 18px; /* Smaller font size */
        color: #6c757d; /* Greyish color */
        font-weight: normal; /* Normal font weight */
        margin-bottom: 10px; /* Margin below the heading */
    }

    .custom-label {
        font-size: 18px; /* Smaller font size */
        color: #6c757d; /* Greyish color */
        font-weight: normal; /* Normal font weight */
        margin-bottom: 10px; /* Margin below the heading */
    }

</style>

<script>

    // Get the page size dropdown element
    var pageSizeDropdown = document.getElementById('pageSizeDropdown');

    // Event listener for dropdown change
    pageSizeDropdown.addEventListener('change', function () {
        var selectedPageSize = parseInt(this.value); // Get the selected value as an integer

        // Get the grid instance
        var accountGrid = document.getElementById('accountGrid').ej2_instances[0];

        // Update the pageSize of the grid
        accountGrid.pageSettings.pageSize = selectedPageSize;
    });

    // Event listener for dropdown change
    document.getElementById('statementTypeDropdown').addEventListener('change', function () {
        var selectedValue = this.value; // Get the STMNT_ID

        if (selectedValue) {
            // Reload the entire page with the selected STMNT_ID as a query parameter
            window.location.href = `/Mapping/Index?stmntId=${encodeURIComponent(selectedValue)}`;
        } else {
            alert('Please select a valid statement type.');
        }
    });

    // Event listener for saving combined rows
    document.getElementById('saveCombinedRows').addEventListener('click', function () {
        var orderGrid = document.getElementById('grid').ej2_instances[0];
        var accountGrid = document.getElementById('accountGrid').ej2_instances[0];

        var selectedOrderRow = orderGrid.getSelectedRecords();
        var selectedAccountRows = accountGrid.getSelectedRecords();

        // Check if exactly one row is selected in the first grid
        if (selectedOrderRow.length !== 1) {
            alert('Please select exactly one row in the first grid.');
            return;
        }

        // Proceed with combining rows if exactly one row is selected in the first grid
        if (selectedAccountRows.length > 0) {
            var combinedRows = selectedAccountRows.map(accountRow => ({
                DETAIL_ID: selectedOrderRow[0].DETAIL_ID,
                STMNT_ID: selectedOrderRow[0].STMNT_ID,
                SHEET_ID: selectedOrderRow[0].SHEET_ID,
                HEADER_ID: selectedOrderRow[0].HEADER_ID,
                GL_ACCT_CAT_CD: selectedOrderRow[0].GL_ACCT_CAT_CD,
                REF_CD: selectedOrderRow[0].REF_CD,
                DESCRIPTION: selectedOrderRow[0].DESCRIPTION,
                SYS_CREATE_TS: selectedOrderRow[0].SYS_CREATE_TS,
                CREATED_BY: selectedOrderRow[0].CREATED_BY,
                GL_ACCT_ID: accountRow.GL_ACCT_ID,
                GL_ACCT_NO: accountRow.GL_ACCT_NO,
                LEDGER_NO: accountRow.LEDGER_NO,
                ACCT_DESC: accountRow.ACCT_DESC,
                BAL_CD: accountRow.BAL_CD
            }));

            // Fetch request to save combined rows
            fetch('/Mapping/SaveCombinedRows', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(combinedRows)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        alert('Error: ' + data.error);
                    } else {
                        alert(data.message);
                        // Reload the page after a successful save
                        location.reload();
                    }
                })
                .catch(error => {
                    alert('Error: ' + error.message);
                });
        } else {
            alert('No rows selected in the account grid.');
        }
    });
</script>

