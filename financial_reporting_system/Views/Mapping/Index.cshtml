@using syncfusion_grid.Controllers
@model List<MappingController.FinancialStatementDetail>

@{
    ViewData["Title"] = "Index";
}



<div class="container">
    <div class="content">
        <!-- Form for Date Range and Statement Type Submission -->
        <form id="dateRangeForm" method="get" action="/Mapping/Index" onsubmit="return validateForm()">
            <!-- Statement Type Dropdown -->
            <h1 class="mt-5">Select a Financial Statement Type</h1>
            <select id="statementTypeDropdown" name="stmntId" class="form-control">
                <option value="">-- Select a Statement Type --</option>
                @foreach (var item in ViewBag.StatementTypes)
                {
                    <option value="@item.STMNT_ID" selected="@(item.STMNT_ID == ViewBag.SelectedStmntId ? "selected" : null)">
                        @item.DESCRIPTION
                    </option>
                }
            </select>

           

        </form>

        <!-- Available Statement Details -->
        <h1 class="mt-5">Available Statement Details for @ViewBag.SelectedDescription</h1>
        <!-- First Grid -->
        <ejs-grid id="grid" dataSource="@Model" allowPaging="true" allowSorting="true" allowFiltering="true" allowGrouping="false" cssClass="white-grid">
            <e-grid-pagesettings pageSize="5"></e-grid-pagesettings>
            <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>
            <e-grid-columns>
                <e-grid-column type="checkbox" width="50"></e-grid-column>
                <e-grid-column field="GL_ACCT_CAT_CD" headerText="GL Account Category Code" textAlign="Right" width="200"></e-grid-column>
                <e-grid-column field="REF_CD" headerText="Reference Code" textAlign="Right" width="200"></e-grid-column>
                <e-grid-column field="DESCRIPTION" headerText="Description" textAlign="Right" width="500"></e-grid-column>
                <e-grid-column field="SYS_CREATE_TS" headerText="System Create Timestamp" textAlign="Right" width="120" format="yMd"></e-grid-column>
                <e-grid-column field="CREATED_BY" headerText="Created By" textAlign="Right" width="120"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>

        <!-- Spacer between grids -->
        <div class="grid-spacer"></div>

        <h1 class="mt-5">Available Ledgers</h1>
        <!-- Dropdown for Page Size Selection -->
        <div class="mb-3">
            <label for="pageSizeDropdown" class="custom-label">Rows to be fetched:</label>
            <select id="pageSizeDropdown" class="form-select" style="width: 200px;">
                <option value="10" selected>10</option>
                <option value="20">20</option>
                <option value="40">40</option>
                <option value="100">100</option>

            </select>
        </div>
        
        <!-- Second Grid -->
        <ejs-grid id="accountGrid" dataSource="@ViewBag.AccountDetails" allowPaging="true" allowSorting="true" allowFiltering="true" allowGrouping="false" cssClass="white-grid">
            <e-grid-pagesettings pageSize="10"></e-grid-pagesettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-columns>
                <e-grid-column type="checkbox" width="50"></e-grid-column>
                <e-grid-column field="LEDGER_NO" headerText="Ledger No" textAlign="Right" width="150"></e-grid-column>
                <e-grid-column field="GL_ACCT_NO" headerText="Ledger account" textAlign="Right" width="150"></e-grid-column>
                <e-grid-column field="ACCT_DESC" headerText="Account Description" textAlign="Right" width="350"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>

            <!-- Centered Button -->
        <div class="button-container">
            <!-- Save MappedGL Button -->
            <button id="saveCombinedRows" class="custom-delete-button">Save MappedGL</button>

            <!-- Uploading Button (Initially Hidden) -->
            <button id="uploadingButton" class="custom-delete-button" style="display: none;" disabled>
                Uploading...
            </button>
        </div>

            <!-- Add the "View Grid" button -->
            <div class="button-container">
                <a asp-action="Grid" class="btn btn-secondary">View Mapped GL</a>
            </div>
    

    </div>
</div>

<!-- Include Flatpickr CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var orderGrid = document.getElementById('grid').ej2_instances[0]; // Get Syncfusion Grid instance

        // ✅ Function to handle row selection & reload with new DETAIL_ID
        function handleRowSelection(args) {
            var selectedRow = orderGrid.getSelectedRecords()[0]; // Get selected row
            if (selectedRow) {
                var DETAIL_ID = selectedRow.DETAIL_ID; // Capture DETAIL_ID

                // ✅ If the selected DETAIL_ID is different, update and reload
                if (sessionStorage.getItem('selectedDetailId') !== DETAIL_ID.toString()) {
                    sessionStorage.setItem('selectedDetailId', DETAIL_ID); // Save new DETAIL_ID

                    var stmntId = document.getElementById('statementTypeDropdown').value; // Get STMNT_ID
                    if (DETAIL_ID && stmntId) {
                        var newUrl = `/Mapping/Index?stmntId=${encodeURIComponent(stmntId)}&detailId=${encodeURIComponent(DETAIL_ID)}`;
                        window.location.href = newUrl; // ✅ Reload with updated DETAIL_ID
                    }
                }
            }
        }

        // ✅ Assign rowSelected event to handle row selection
        orderGrid.rowSelected = handleRowSelection;

        // ✅ After page reload, reselect the previously selected row WITHOUT triggering rowSelected event
        setTimeout(() => {
            var storedDetailId = sessionStorage.getItem('selectedDetailId'); // Retrieve stored DETAIL_ID
            if (storedDetailId) {
                var gridData = orderGrid.getCurrentViewRecords(); // Get grid data
                var selectedRecord = gridData.find(record => record.DETAIL_ID == storedDetailId);

                if (selectedRecord) {
                    var rowIndex = gridData.indexOf(selectedRecord); // Get row index
                    if (rowIndex !== -1) {
                        // ✅ Temporarily disable event listener to prevent reload loop
                        orderGrid.rowSelected = null;

                        orderGrid.selectRows([rowIndex]); // ✅ Reselect row

                        // ✅ Re-enable row selection after a delay
                        setTimeout(() => {
                            orderGrid.rowSelected = handleRowSelection; // ✅ Re-enable row selection
                        }, 1000);
                    }
                }
            }
        }, 1500); // Delay to ensure grid is fully loaded
    });












    // Function to validate the form before submission
    function validateForm() {
        const statementType = document.getElementById('statementTypeDropdown');
        const startDate = document.getElementById('startDatePicker');
        const endDate = document.getElementById('endDatePicker');

        let isValid = true;

        // Check if statement type is selected
        if (!statementType.value) {
            statementType.classList.add('is-invalid'); // Add invalid class
            isValid = false;
        } else {
            statementType.classList.remove('is-invalid'); // Remove invalid class
        }

        // Check if start date is selected
        if (!startDate.value) {
            startDate.classList.add('is-invalid'); // Add invalid class
            isValid = false;
        } else {
            startDate.classList.remove('is-invalid'); // Remove invalid class
        }

        // Check if end date is selected
        if (!endDate.value) {
            endDate.classList.add('is-invalid'); // Add invalid class
            isValid = false;
        } else {
            endDate.classList.remove('is-invalid'); // Remove invalid class
        }

        // Show alert if any field is invalid
        if (!isValid) {
            alert('Please fill in all required fields.');
        }

        return isValid; // Prevent form submission if any field is invalid
    }

    // Get the page size dropdown element
    var pageSizeDropdown = document.getElementById('pageSizeDropdown');

    // Event listener for dropdown change
    pageSizeDropdown.addEventListener('change', function () {
        var selectedPageSize = parseInt(this.value); // Get the selected value as an integer

        // Get the grid instance
        var accountGrid = document.getElementById('accountGrid').ej2_instances[0];

        // Update the pageSize of the grid
        accountGrid.pageSettings.pageSize = selectedPageSize;
    });

    // Event listener for dropdown change
    document.getElementById('statementTypeDropdown').addEventListener('change', function () {
        var selectedValue = this.value; // Get the STMNT_ID

        if (selectedValue) {
            // Reload the entire page with the selected STMNT_ID as a query parameter
            window.location.href = `/Mapping/Index?stmntId=${encodeURIComponent(selectedValue)}`;
        } else {
            alert('Please select a valid statement type.');
        }
    });

    // Event listener for saving combined rows
       document.getElementById('saveCombinedRows').addEventListener('click', function () {
            var saveButton = document.getElementById('saveCombinedRows');
            var uploadingButton = document.getElementById('uploadingButton');

            var orderGrid = document.getElementById('grid').ej2_instances[0];  // First Grid
            var accountGrid = document.getElementById('accountGrid').ej2_instances[0];  // Second Grid

            var selectedOrderRow = orderGrid.getSelectedRecords();  // Selected rows in first grid
            var selectedAccountRows = accountGrid.getSelectedRecords();  // Selected rows in second grid

            // Ensure exactly one row is selected in the first grid
            if (selectedOrderRow.length !== 1) {
                alert('Please select exactly one row in the first grid.');
                return;
            }

            // Ensure exactly one row is selected in the second grid
            if (selectedAccountRows.length !== 1) {
                alert('Please select exactly one row in the second grid.');
                return;
            }

            // Hide "Save MappedGL" and show "Uploading..."
            saveButton.style.display = 'none';
            uploadingButton.style.display = 'inline-block';

            var combinedRows = selectedAccountRows.map(accountRow => ({
                DETAIL_ID: selectedOrderRow[0].DETAIL_ID,
                STMNT_ID: selectedOrderRow[0].STMNT_ID,
                SHEET_ID: selectedOrderRow[0].SHEET_ID,
                HEADER_ID: selectedOrderRow[0].HEADER_ID,
                GL_ACCT_CAT_CD: selectedOrderRow[0].GL_ACCT_CAT_CD,
                REF_CD: selectedOrderRow[0].REF_CD,
                DESCRIPTION: selectedOrderRow[0].DESCRIPTION,
                SYS_CREATE_TS: selectedOrderRow[0].SYS_CREATE_TS,
                CREATED_BY: selectedOrderRow[0].CREATED_BY,
                LEDGER_NO: accountRow.LEDGER_NO,
                ACCT_DESC: accountRow.ACCT_DESC
            }));

            fetch('/Mapping/SaveCombinedRows', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(combinedRows)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                alert(data.message || 'Upload successful.');
                // Restore buttons after alert is dismissed
                saveButton.style.display = 'inline-block';
                uploadingButton.style.display = 'none';

                // Reload the page to reflect saved data
                location.reload();
            })
            .catch(error => {
                alert('Error: ' + error.message);
                // Restore buttons in case of failure
                saveButton.style.display = 'inline-block';
                uploadingButton.style.display = 'none';
        });
    });

</script>

<style>






    #statementTypeDropdown {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        font-family: Arial, sans-serif;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #f9f9f9;
        cursor: pointer;
        transition: border-color 0.3s ease;
    }

        #statementTypeDropdown:hover {
            border-color: #888;
        }

        #statementTypeDropdown:focus {
            border-color: #5b9bd5;
            outline: none;
            box-shadow: 0 0 3px rgba(91, 155, 213, 0.5);
        }

        #statementTypeDropdown option {
            padding: 10px;
            font-size: 16px;
        }

.container {
    margin-left: 100px; /* Space from the left */
    padding-right: 5px; /* Space inside on the right */
    display: flex; /* Enables centering */
    justify-content: center; /* Centers contents horizontally */
    width: calc(100% - 50px); /* Makes the container fill the remaining screen width */
    box-sizing: border-box; /* Ensures padding is included in width */    
}

.content { 
    max-width: 1200px; /* Optional: Set a max width for better layout on large screens */
    margin: 0 auto; /* Center the content inside the container */
    padding: 20px; /* Add padding for inner spacing */
    box-sizing: border-box; /* Ensures padding is included in width */
}

.content h1, .content select, .content input, .content button, .content label {
    max-width: 100%; /* Ensure child elements do not exceed the width of their parent */
    box-sizing: border-box; /* Consistent sizing */
}


.is-invalid {
    border: 1px solid red !important; /* Highlight with red border */
}

    #statementTypeDropdown {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        font-family: Arial, sans-serif;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #f9f9f9;
        cursor: pointer;
        transition: border-color 0.3s ease;
    }

        #statementTypeDropdown:hover {
            border-color: #888;
        }

        #statementTypeDropdown:focus {
            border-color: #5b9bd5;
            outline: none;
            box-shadow: 0 0 3px rgba(91, 155, 213, 0.5);
        }

        #statementTypeDropdown option {
            padding: 10px;
            font-size: 16px;
        }




    /* Define the white-grid class */
    .white-grid {
        background-color: white !important; /* Set the background color to white */
        color: black; /* Set the text color to black */
    }

        /* Style the header */
        .white-grid .e-gridheader {
            background-color: white !important; /* Set the header background color to white */
            color: aquamarine; /* Set the header text color to black */
            border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of the header */
        }

        /* Style the rows */
        .white-grid .e-gridcontent .e-rowcell {
            background-color: white; /* Set the row cell background color to white */
            color: #6c757d !important; /* Set the row cell text color to #6c757d */
            border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of each row */
            border: none;
        }
        /* Style the rows on hover */
        .white-grid .e-gridcontent .e-row:hover .e-rowcell {
            background-color: lightgray !important;
            color: aquamarine !important; /* Set the row cell text color to aquamarine on hover */
        }

        /* Style the pager */
        .white-grid .e-gridpager {
            background-color: white; /* Set the pager background color to white */
            color: black; /* Set the pager text color to black */
            border-top: 1px solid #dee2e6; /* Add a border at the top of the pager */
        }

        /* Style the filter row */
        .white-grid .e-filterbarcell {
            background-color: white !important; /* Set the filter row background color to white */
            color: InactiveCaptionText !important; /* Set the filter row text color to black */
            border-bottom: 1px solid #dee2e6; /* Add a border at the bottom of the filter row */
        }

            /* Style the filter input */
            .white-grid .e-filterbarcell input {
                background-color: white; /* Set the filter input background color to white */
                color: #6c757d !important; /* Set the filter input text color to #6c757d */
                border: 1px solid #ced4da; /* Add a border to the filter input */
            }

            /* Style the filter dropdown */
            .white-grid .e-filterbarcell .e-dropdownlist {
                background-color: white !important; /* Set the filter dropdown background color to white */
                color: #6c757d; /* Set the filter dropdown text color to #6c757d */
                border: 1px solid #ced4da; /* Add a border to the filter dropdown */
            }

                /* Style the filter dropdown options */
                .white-grid .e-filterbarcell .e-dropdownlist .e-list-item {
                    background-color: white; /* Set the filter dropdown option background color to white */
                    color: #6c757d; /* Set the filter dropdown option text color to #6c757d */
                }

                    /* Style the filter dropdown options on hover */
                    .white-grid .e-filterbarcell .e-dropdownlist .e-list-item:hover {
                        background-color: hotpink !important; /* Set the filter dropdown option background color on hover */
                        color: aquamarine !important; /* Set the filter dropdown option text color on hover */
                    }

                    /* Style the filter dropdown options on focus */
                    .white-grid .e-filterbarcell .e-dropdownlist .e-list-item.e-active {
                        background-color: #e9ecef; /* Set the filter dropdown option background color on focus */
                        color: #6c757d; /* Set the filter dropdown option text color on focus */
                    }

    .button-container {
        display: flex; /* Use Flexbox */
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        margin-top: 20px; /* Add space above the button */
    }

    .custom-delete-button {
        background-color: #d9534f; /* Red background color */
        color: white; /* White text color */
        border: none; /* No border */
        padding: 10px 20px; /* Padding for spacing */
        font-size: 16px; /* Font size */
        border-radius: 5px; /* Rounded corners */
        cursor: pointer; /* Pointer cursor on hover */
        transition: background-color 0.3s ease; /* Smooth transition effect */
    }

        .custom-delete-button:hover {
            background-color: #c9302c; /* Darker red on hover */
        }

    .grid-spacer {
        height: 20px; /* Spacer height between the grids */
    }

    h1 {
        font-size: 18px; /* Smaller font size */
        color: #6c757d; /* Greyish color */
        font-weight: bold; /* Bold font weight */
        margin-bottom: 10px; /* Margin below the heading */
        text-align: center; /* Centers the text */
    }


    .custom-label {
        font-size: 18px; /* Smaller font size */
        color: #6c757d; /* Greyish color */
        font-weight: normal; /* Normal font weight */
        margin-bottom: 10px; /* Margin below the heading */
    }






    /*styles for date picker*/ 
    .date-picker-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
        max-width: 400px;
        margin: 0 auto;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .date-label {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 5px;
        color: #495057;
    }

    .datePicker {
        padding: 8px 12px;
        font-size: 14px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        transition: border-color 0.3s ease;
    }

        .datePicker:focus {
            outline: none;
            border-color: #007bff;
        }

    .form-group .datePicker::placeholder {
        color: #6c757d;
        font-style: italic;
    }







    /* Optional: Ensure form inputs take full width on small screens */
    .form-group .datePicker {
        width: 100%;
    }

    .date-label {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 5px;
        color: #495057;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    /* Button Styling */
    .search-btn {
        padding: 8px 20px;
        font-size: 16px;
        font-weight: 600;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        align-self: flex-start; /* Aligns button to the left */
        margin-top: 10px;
        transition: background-color 0.3s ease;
    }

        .search-btn:hover {
            background-color: #0056b3; /* Darker shade when hovered */
        }

        .search-btn:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(38, 143, 255, 0.5); /* Focus state */
        }

        .search-btn:active {
            background-color: #004085; /* Darker when clicked */
        }

</style>

