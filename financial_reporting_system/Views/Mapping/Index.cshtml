@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@{
    ViewData["PageTitle"] = "Financial Mapping";
    ViewBag.Title = "Portfolios";
    var portfolios = ViewBag.Portfolios as List<Dictionary<string, object>>;
    var orgFinancialMappings = ViewBag.OrgFinancialMappings as List<Dictionary<string, object>>;
    var statementIds = ViewBag.StatementIds as List<int>;
    var accountCategories = ViewBag.AccountCategories as List<string>;
}

<form method="post" id="searchForm" class="centered-form">
    <div class="floating-label-group">
        <ejs-dropdownlist id="statementIdDropdown" name="portfolioCodeInput" dataSource="@statementIds" placeholder="Select a Statement ID" floatLabelType="Auto"></ejs-dropdownlist>
        <ejs-dropdownlist id="accountCategoryDropdown" name="accountCategoryInput" dataSource="@accountCategories" placeholder="Select an Account Category" floatLabelType="Auto"></ejs-dropdownlist>
        <input type="submit" value="Search" class="btn btn-blue" />
    </div>
</form>

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
}
else
{
    <div class="row mb-12">
        <div class="col-md-6">
            <div class="row mb-5">
                <div id="grid1" class="dark-theme">
                    @Html.EJS().Grid("Grid1").DataSource(portfolios).AllowSorting(true).AllowPaging(true).PageSettings(settings => settings.PageSize(12)).Columns(col =>
                             {
                                 col.Field("Checkbox").HeaderText("").Template("#checkboxTemplate").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Width(50).Add();
                                 if (portfolios != null && portfolios.Any())
                                 {
                                     foreach (var key in portfolios.First().Keys)
                                     {
                                         col.Field(key).HeaderText(key).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Width(150).Add();
                                     }
                                 }
                             }).Render()
                </div>
            </div>
        </div>
        <div class="col-md-1">
            <button id="combineButton" class="btn btn-primary" aria-label="Combine Selected Rows">
                <i class="fa-solid fa-arrow-right mr-2"></i>
            </button>
        </div>
        <div class="col-md-5">
            <div class="row mb-5">
                <div id="grid2" class="dark-theme">
                    @Html.EJS().Grid("Grid2").DataSource(orgFinancialMappings).AllowSorting(true).AllowPaging(true).PageSettings(settings => settings.PageSize(12)).Columns(col =>
                             {
                                 col.Field("Checkbox").HeaderText("").Template("#checkboxTemplate").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Width(50).Add();
                                 if (orgFinancialMappings != null && orgFinancialMappings.Any())
                                 {
                                     foreach (var key in orgFinancialMappings.First().Keys)
                                     {
                                         col.Field(key).HeaderText(key).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Width(150).Add();
                                     }
                                 }
                             }).Render()
                </div>
            </div>
        </div>
    </div>
}

<script id="checkboxTemplate" type="text/x-template">
    <input type="checkbox" class="checkbox" />
</script>

<script>
    document.getElementById('combineButton').addEventListener('click', combineSelectedRows);

    function combineSelectedRows() {
        console.log('combineSelectedRows function called');

        var grid1 = document.getElementById('Grid1').ej2_instances[0];
        var grid2 = document.getElementById('Grid2').ej2_instances[0];

        if (!grid1 || !grid2) {
            console.error('Grid instances not found');
            return;
        }

        var selectedRowsGridA = getCheckedRows(grid1); // All checked rows from Grid1
        var selectedRowsGridB = grid2.getSelectedRecords(); // Entire selected records from Grid2

        console.log('Selected Rows from Grid1:', selectedRowsGridA);
        console.log('Selected Rows from Grid2:', selectedRowsGridB);

        if (selectedRowsGridA.length === 0 || selectedRowsGridB.length === 0) {
            alert('Please select rows from both grids.');
            return;
        }

        // AJAX call to combine data on the server
        $.post('/Mapping/CombineGridData', { selectedRowsGridA: selectedRowsGridA, selectedRowsGridB: selectedRowsGridB }, function (response) {
            if (response.success) {
                alert('Data combined successfully!');
                location.reload(); // Reload page to reflect changes
            } else {
                alert('Failed to combine data: ' + response.error);
            }
        }).fail(function () {
            alert('An error occurred while trying to combine data. Please try again.');
        });
    }

    function getCheckedRows(grid) {
        console.log('getCheckedRows function called');

        var checkedRows = [];
        var gridElement = grid.element;
        var checkboxes = gridElement.querySelectorAll('.checkbox:checked');

        console.log('Checked Checkboxes:', checkboxes);

        checkboxes.forEach(function (checkbox) {
            var row = checkbox.closest('tr');
            var rowData = grid.getRowInfo(row).rowData;
            console.log('Checked Row Data:', rowData);
            checkedRows.push(rowData);
        });

        return checkedRows;
    }
</script>